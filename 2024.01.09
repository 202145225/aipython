{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNN335yJumT612es5Zny6CJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/202145225/aipython/blob/main/2024.01.09\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BEQzJTYzJ5_T",
        "outputId": "94a43383-a4aa-4b6a-9f4f-09e4f7960733"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. 1부터 10까지(미포함)의 2걸음 크기의 정수값 배열:\n",
            "[1 3 5 7 9]\n",
            "\n",
            "2. 모양이 (3, 4)인 모든 값이 1인 배열:\n",
            "[[1. 1. 1. 1.]\n",
            " [1. 1. 1. 1.]\n",
            " [1. 1. 1. 1.]]\n",
            "\n",
            "3. 0과 1사이를 10등분하고자 할 때 등분값 배열:\n",
            "[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556\n",
            " 0.66666667 0.77777778 0.88888889 1.        ]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "arr1 = np.arange(1, 10, 2)\n",
        "\n",
        "# 2. 모양이 (3, 4)인 모든 값이 1인 배열 생성\n",
        "arr2 = np.ones((3, 4))\n",
        "\n",
        "# 3. 0과 1사이를 10등분하고자 할 때 등분값 배열 생성\n",
        "arr3 = np.linspace(0, 1, 10)\n",
        "\n",
        "# 결과 출력\n",
        "print(\"1. 1부터 10까지(미포함)의 2걸음 크기의 정수값 배열:\")\n",
        "print(arr1)\n",
        "\n",
        "print(\"\\n2. 모양이 (3, 4)인 모든 값이 1인 배열:\")\n",
        "print(arr2)\n",
        "\n",
        "print(\"\\n3. 0과 1사이를 10등분하고자 할 때 등분값 배열:\")\n",
        "print(arr3)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# 1. A 행령을 생성해보자.  [reshape을 이용]\n",
        "A=np.arange(1, 26).reshape(5, 5)\n",
        "\n",
        "# 2. A의 모양(shape)을 출력해보자\n",
        "print(\"A의 모양 출력: \"), A.shape\n",
        "\n",
        "# 3. 19 값을 추출\n",
        "value_19 = A[3, 3]\n",
        "print(\"19 값 추출 :\", value_19)\n",
        "\n",
        "# 4. 슬라이싱을 이용하여 [[1, 2], [6, 7]] 값을 추출\n",
        "subset1 = A[:2, :2]\n",
        "print(\"4. [[1, 2], [6, 7]] 값을 추출:\\n\", subset1)\n",
        "\n",
        "# 5. 슬라이싱을 이용하여 [[19, 20], [24, 25]] 값을 추출\n",
        "subset2 = A[6:8, 1:3]\n",
        "print(\"5. [[19, 20], [24, 25]] 값을 추출:\\n\", subset2)\n",
        "\n",
        "# 6. 슬라이싱을 이용하여 0축의 첫 번째 행과 두 번째 행을 추출\n",
        "subset3 = A[:2, :]\n",
        "print(\"6. 0축의 첫 번째 행과 두 번째 행을 추출:\\n\", subset3)\n",
        "\n",
        "# 7. 슬라이싱을 이용하여 1축의 마지막 열과 마지막 직전 열을 추출\n",
        "subset4 = A[:, -2:]\n",
        "print(\"7. 1축의 마지막 열과 마지막 직전 열을 추출:\\n\", subset4)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oh1f0ddNJ7nT",
        "outputId": "d3e61926-e14b-4aa1-9b12-9c7dd1099c54"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A의 모양 출력: \n",
            "19 값 추출 : 19\n",
            "4. [[1, 2], [6, 7]] 값을 추출:\n",
            " [[1 2]\n",
            " [6 7]]\n",
            "5. [[19, 20], [24, 25]] 값을 추출:\n",
            " []\n",
            "6. 0축의 첫 번째 행과 두 번째 행을 추출:\n",
            " [[ 1  2  3  4  5]\n",
            " [ 6  7  8  9 10]]\n",
            "7. 1축의 마지막 열과 마지막 직전 열을 추출:\n",
            " [[ 4  5]\n",
            " [ 9 10]\n",
            " [14 15]\n",
            " [19 20]\n",
            " [24 25]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr=np.arange(1, 37).reshape(3,3,4)\n",
        "print(arr)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EyxUfQckMiLT",
        "outputId": "bf8915ad-8a3c-4701-9f51-73ff3bd34a3d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[ 1  2  3  4]\n",
            "  [ 5  6  7  8]\n",
            "  [ 9 10 11 12]]\n",
            "\n",
            " [[13 14 15 16]\n",
            "  [17 18 19 20]\n",
            "  [21 22 23 24]]\n",
            "\n",
            " [[25 26 27 28]\n",
            "  [29 30 31 32]\n",
            "  [33 34 35 36]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5QrkCryLQZaz"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}